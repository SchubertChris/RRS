/* ========================================== */
/* ================ MIXIN SYSTEM ============ */
/* ========================================== */
/* Best Practice: Wiederverwendbare Funktionen für konsistente Styles */

// WICHTIG: Nur Variablen importieren (NICHT Mixin - das wäre eine Schleife!)
@use "Variables" as *;

/* ========================================== */
// Typography Mixins
/* ========================================== */

// Font Size with Responsive Clamp
@mixin font-size($min-size, $base-size, $max-size: null) {
    @if $max-size {
        font-size: clamp($min-size, $base-size, $max-size);
    }

    @else {
        font-size: $base-size;
    }
}

// Text Truncation
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin text-truncate-lines($lines: 2) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

// Text Selection
@mixin text-selection($background, $color) {
    ::selection {
        background: $background;
        color: $color;
        text-shadow: none;
    }

    ::-moz-selection {
        background: $background;
        color: $color;
        text-shadow: none;
    }
}

/* ========================================== */
// Layout Mixins
/* ========================================== */

// Flexbox Utilities
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-between {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin flex-around {
    display: flex;
    align-items: center;
    justify-content: space-around;
}

@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-column-center {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

// Grid Utilities
@mixin grid-center {
    display: grid;
    place-items: center;
}

@mixin grid-columns($columns, $gap: $space-4) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;
}

@mixin grid-auto-fit($min-width: 250px, $gap: $space-4) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
    gap: $gap;
}

// Container
@mixin container($max-width: $container-xl, $padding: $space-4) {
    max-width: $max-width;
    margin: 0 auto;
    padding-left: $padding;
    padding-right: $padding;
}

// Positioning
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin absolute-fill {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

/* ========================================== */
// Responsive Mixins
/* ========================================== */

// Breakpoint Mixins
@mixin media-up($breakpoint) {
    @if $breakpoint ==xs {
        @media (min-width: #{$breakpoint-xs}) {
            @content;
        }
    }

    @else if $breakpoint ==sm {
        @media (min-width: #{$breakpoint-sm}) {
            @content;
        }
    }

    @else if $breakpoint ==md {
        @media (min-width: #{$breakpoint-md}) {
            @content;
        }
    }

    @else if $breakpoint ==lg {
        @media (min-width: #{$breakpoint-lg}) {
            @content;
        }
    }

    @else if $breakpoint ==xl {
        @media (min-width: #{$breakpoint-xl}) {
            @content;
        }
    }

    @else if $breakpoint ==2xl {
        @media (min-width: #{$breakpoint-2xl}) {
            @content;
        }
    }

    @else {
        @media (min-width: #{$breakpoint}) {
            @content;
        }
    }
}

@mixin media-down($breakpoint) {
    @if $breakpoint ==xs {
        @media (max-width: #{$breakpoint-xs - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==sm {
        @media (max-width: #{$breakpoint-sm - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==md {
        @media (max-width: #{$breakpoint-md - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==lg {
        @media (max-width: #{$breakpoint-lg - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==xl {
        @media (max-width: #{$breakpoint-xl - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==2xl {
        @media (max-width: #{$breakpoint-2xl - 1px}) {
            @content;
        }
    }

    @else {
        @media (max-width: #{$breakpoint - 1px}) {
            @content;
        }
    }
}

@mixin media-between($min, $max) {
    @media (min-width: #{$min}) and (max-width: #{$max - 1px}) {
        @content;
    }
}

@mixin media-only($breakpoint) {
    @if $breakpoint ==xs {
        @media (max-width: #{$breakpoint-sm - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==sm {
        @media (min-width: #{$breakpoint-sm}) and (max-width: #{$breakpoint-md - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==md {
        @media (min-width: #{$breakpoint-md}) and (max-width: #{$breakpoint-lg - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==lg {
        @media (min-width: #{$breakpoint-lg}) and (max-width: #{$breakpoint-xl - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==xl {
        @media (min-width: #{$breakpoint-xl}) and (max-width: #{$breakpoint-2xl - 1px}) {
            @content;
        }
    }

    @else if $breakpoint ==2xl {
        @media (min-width: #{$breakpoint-2xl}) {
            @content;
        }
    }
}

/* ========================================== */
// Animation Mixins
/* ========================================== */

// Animation Preparation
@mixin animate-prepare($animation: 'fade-up', $delay: 0s, $duration: $duration-500, $ease-out: $ease-out) {
    opacity: 0;
    transition: all $duration $ease-out $delay;

    @if $animation =='fade-up' {
        transform: translateY(2rem) translateZ(0);
    }

    @else if $animation =='fade-down' {
        transform: translateY(-2rem) translateZ(0);
    }

    @else if $animation =='fade-left' {
        transform: translateX(-2rem) translateZ(0);
    }

    @else if $animation =='fade-right' {
        transform: translateX(2rem) translateZ(0);
    }

    @else if $animation =='scale-up' {
        transform: scale(0.8) translateZ(0);
    }

    @else if $animation =='rotate-in' {
        transform: rotate(-10deg) scale(0.8) translateZ(0);
    }

    &.animate-in {
        opacity: 1;
        transform: translateY(0) translateX(0) rotate(0deg) scale(1) translateZ(0);
        transition: all $duration $ease-out $delay;
    }
}

@mixin stagger-children($delay: 100ms, $max-delay: 1s) {
    >* {
        @for $i from 1 through 20 {
            &:nth-child(#{$i}) {
                $computed-delay: $delay * ($i - 1);

                @if $computed-delay <=$max-delay {
                    transition-delay: $computed-delay;
                }

                @else {
                    transition-delay: $max-delay;
                }
            }
        }
    }
}

@mixin hover-lift($distance: 2px, $shadow: true) {
    transition: transform $duration-200 $ease-out, box-shadow $duration-200 $ease-out;

    &:hover {
        transform: translateY(-$distance);

        @if $shadow {
            box-shadow: $shadow-lg;
        }
    }
}

@mixin hover-scale($scale: 1.05) {
    transition: transform $duration-200 $ease-out;

    &:hover {
        transform: scale($scale) translateZ(0);
    }
}

@mixin hover-glow($color: $color-primary) {
    transition: box-shadow $duration-300 $ease-out;

    &:hover {
        @include glow($color, 'md');
    }
}

/* ========================================== */
// Button & Form Mixins
/* ========================================== */

// Button Base
@mixin button-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: $space-2;

    font-family: $font-family-sans;
    font-weight: $font-weight-medium;
    font-size: $font-size-base;
    line-height: $line-height-normal;
    text-decoration: none;
    text-align: center;
    white-space: nowrap;

    padding: $btn-padding-y $btn-padding-x;
    border: 1px solid transparent;
    border-radius: $btn-border-radius;

    cursor: pointer;
    user-select: none;
    vertical-align: middle;

    transition: $transition-base;

    &:focus-visible {
        outline: 2px solid $color-primary;
        outline-offset: 2px;
    }

    &:disabled,
    &.disabled {
        opacity: 0.6;
        cursor: not-allowed;
        pointer-events: none;
    }
}

// Button Variants
@mixin button-variant($bg-color, $text-color, $border-color: $bg-color) {
    background-color: $bg-color;
    color: $text-color;
    border-color: $border-color;

    &:hover:not(:disabled) {
        background-color: darken($bg-color, 8%);
        border-color: darken($border-color, 8%);
        transform: translateY(-1px);
    }

    &:active:not(:disabled) {
        background-color: darken($bg-color, 12%);
        border-color: darken($border-color, 12%);
        transform: translateY(0);
    }
}

@mixin button-outline($color) {
    background-color: transparent;
    color: $color;
    border-color: $color;

    &:hover:not(:disabled) {
        background-color: $color;
        color: $white;
    }

    &:active:not(:disabled) {
        background-color: darken($color, 8%);
        border-color: darken($color, 8%);
    }
}

@mixin button-ghost($color) {
    background-color: transparent;
    color: $color;
    border-color: transparent;

    &:hover:not(:disabled) {
        background-color: rgba($color, 0.1);
    }

    &:active:not(:disabled) {
        background-color: rgba($color, 0.2);
    }
}

// Button Sizes
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius: $btn-border-radius) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    border-radius: $border-radius;
}

// Form Input Base
@mixin input-base {
    display: block;
    width: 100%;

    font-family: $font-family-sans;
    font-size: $input-font-size;
    font-weight: $font-weight-normal;
    line-height: $line-height-normal;
    color: $text-primary;

    background-color: $bg-primary;
    border: $input-border-width solid $border-primary;
    border-radius: $input-border-radius;
    padding: $input-padding-y $input-padding-x;

    transition: $transition-base;

    &:focus {
        outline: none;
        border-color: $color-primary;
        box-shadow: 0 0 0 3px rgba($color-primary, 0.1);
    }

    &::placeholder {
        color: $text-muted;
        opacity: 1;
    }

    &:disabled,
    &[readonly] {
        background-color: $bg-secondary;
        color: $text-muted;
        border-color: $border-secondary;
        opacity: 1;
        cursor: not-allowed;
    }
}

// Form Validation States
@mixin input-validation($color) {
    border-color: $color;

    &:focus {
        border-color: $color;
        box-shadow: 0 0 0 3px rgba($color, 0.1);
    }
}

/* ========================================== */
// Visual Effects Mixins
/* ========================================== */

// Shadows
@mixin shadow($level: 'base') {
    @if $level =='sm' {
        box-shadow: $shadow-sm;
    }

    @else if $level =='base' {
        box-shadow: $shadow;
    }

    @else if $level =='md' {
        box-shadow: $shadow-md;
    }

    @else if $level =='lg' {
        box-shadow: $shadow-lg;
    }

    @else if $level =='xl' {
        box-shadow: $shadow-xl;
    }

    @else if $level =='2xl' {
        box-shadow: $shadow-2xl;
    }

    @else if $level =='inner' {
        box-shadow: $shadow-inner;
    }

    @else {
        box-shadow: $level;
    }
}

// Glow Effect
@mixin glow($color: $color-primary, $intensity: 'base') {
    @if $intensity =='sm' {
        box-shadow: 0 0 5px rgba($color, 0.5);
    }

    @else if $intensity =='base' {
        box-shadow: 0 0 15px rgba($color, 0.5);
    }

    @else if $intensity =='md' {
        box-shadow: 0 0 20px rgba($color, 0.5);
    }

    @else if $intensity =='lg' {
        box-shadow: 0 0 25px rgba($color, 0.5);
    }

    @else if $intensity =='xl' {
        box-shadow: 0 0 30px rgba($color, 0.5);
    }
}

// Gradient Background
@mixin gradient-bg($direction: 45deg, $colors...) {
    background: linear-gradient($direction, $colors);
}

@mixin gradient-text($direction: 45deg, $colors...) {
    background: linear-gradient($direction, $colors);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
}

/* ========================================== */
// Utility Mixins
/* ========================================== */

@mixin visually-hidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
}

@mixin clearfix {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

@mixin aspect-ratio($width: 1, $height: 1) {
    aspect-ratio: #{$width} / #{$height};

    // Fallback für ältere Browser
    @supports not (aspect-ratio: 1) {
        position: relative;

        &::before {
            content: '';
            display: block;
            padding-top: #{$height / $width * 100%};
        }

        >* {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    }
}

@mixin scrollbar($width: 8px, $track: transparent, $thumb: $gray-300, $thumb-hover: $gray-400) {

    // Webkit Scrollbar
    &::-webkit-scrollbar {
        width: $width;
        height: $width;
    }

    &::-webkit-scrollbar-track {
        background: $track;
    }

    &::-webkit-scrollbar-thumb {
        background: $thumb;
        border-radius: $width / 2;

        &:hover {
            background: $thumb-hover;
        }
    }

    // Firefox Scrollbar
    scrollbar-width: thin;
    scrollbar-color: $thumb $track;
}

// Print Utilities
@mixin print-only {
    @media print {
        @content;
    }
}

@mixin screen-only {
    @media screen {
        @content;
    }
}

// Accessibility
@mixin focus-ring($color: $color-primary, $width: 2px, $offset: 2px) {
    &:focus-visible {
        outline: $width solid $color;
        outline-offset: $offset;
    }
}

@mixin high-contrast {
    @media (prefers-contrast: high) {
        @content;
    }
}

@mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
        @content;
    }
}

@mixin prefers-dark {
    @media (prefers-color-scheme: dark) {
        @content;
    }
}

@mixin prefers-light {
    @media (prefers-color-scheme: light) {
        @content;
    }
}

/* ========================================== */
// Performance Mixins
/* ========================================== */

@mixin gpu-acceleration {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
}

@mixin will-change($properties...) {
    will-change: $properties;
}

@mixin optimize-legibility {
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}